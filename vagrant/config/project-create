#!/bin/bash
#set -eu
set -e

HOSTNAME=$(hostname)
DOMAIN=$(hostname --domain)
VHOST_PATH="/etc/apache2/sites-available/"

# If HOST contains string
if [[ ${HOSTNAME} =~ ^.*dev.*$ ]]; then
    HOST='dev.'
elif [[ ${HOSTNAME} =~ ^.*test.*$ ]]; then
    HOST='test.'
else
    HOST=''
fi

## -----------------------------------------------------------------------------

## Detect permission
if [[ $(id -u) != 0 ]]; then
    echo -e "\nRun script as a 'root' user or with 'sudo' prefix at the beginning!\n"
    exit
fi

## Get variables
while true; do

    while true; do
        read -e -p "Project name (e.g. 'my-project'): " -i ${PROJECT:-''} PROJECT
        ## https://regex101.com/
        ## ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[#$^+=!*()@%&]).{4,}$
        if [[ ${PROJECT} =~ ^([a-z]+[-]*)+[a-z0-9]+$ ]]; then
            break
        else
            tput bold
            echo -e "Allowed characters are lowercase letters, dash and number."
            echo -e "The minimum length is 2 characters."
            tput sgr0
        fi
    done

    USER=${PROJECT}
    while true; do
        read -e -p "User password: " -i ${USER_PASSWD:-${PROJECT}} USER_PASSWD
        if [[ ${USER_PASSWD} =~ ^[^#:\"\'\\\ ]{2,}$ ]]; then
            break
        else
            tput bold
            echo -e "Excluded characters are # : \" ' \ and 'space'."
            echo -e "The minimum length is 2 characters."
            tput sgr0
        fi
    done

    echo -e "\nDo you want to create a database?"
    select DB_CREATE in "Yes" "No"; do
        case ${DB_CREATE} in
            "Yes" )
                DB_CREATE=true
                break;;
            "No" )
                DB_CREATE=false
                break;;
            * )
                tput bold
                echo "Invalid option ${REPLY}"
                tput sgr0;;
        esac
    done
    ## New line
    echo -e ''

    if [[ -x $(which mysql) ]] && [[ -x $(which psql) ]] && [[ ! ${DB_CREATE} = false ]]; then
        echo -e "\nWhat database do you wish to create?"
        select DB_CREATE in "MySQL and PgSQL" "MySQL" "PgSQL"; do
            case ${DB_CREATE} in
                "MySQL and PgSQL" )
                    DB_CREATE=all
                    break;;
                "MySQL" )
                    DB_CREATE=mysql
                    break;;
                "PgSQL" )
                    DB_CREATE=pgsql
                    break;;
                * )
                    tput bold
                    echo "Invalid option ${REPLY}"
                    tput sgr0;;
            esac
        done
        ## New line
        echo -e ''
    fi

    if [[ -x $(which mysql) ]] || [[ -x $(which psql) ]]; then
        if [[ ! ${DB_CREATE} = false ]]; then

            # Replace character(-) in a string with another character(_)
            DB=${PROJECT//[-]/_}
            DB_USER=${PROJECT//[-]/_}

            while true; do
                read -e -p "Database password: " -i ${DB_PASSWD:-${PROJECT}} DB_PASSWD
                if [[ ${DB_PASSWD} =~ ^[^\'\\\ ]{2,}$ ]]; then
                    break
                else
                    tput bold
                    echo -e "Excluded characters are ' \ and 'space'."
                    echo -e "The minimum length is 2 characters."
                    tput sgr0
                fi
            done
        fi
    fi

    ## Samba
    SAMBA_USER=${USER}
    SAMBA_PASSWD=${USER_PASSWD}

    echo -e "\nYour configuration"
    echo -e "------------------"
    echo -e "Project name:        $(tput setaf 3)${PROJECT}$(tput sgr 0)"
    echo -e "User:                $(tput setaf 3)${USER}$(tput sgr 0)"
    echo -e "Password:            $(tput setaf 3)${USER_PASSWD}$(tput sgr 0)"
    echo -e "Virtual host:        $(tput setaf 3)${HOST}${PROJECT}.${DOMAIN}$(tput sgr 0)"
    if [[ -x $(which mysql) ]] && [[ ! ${DB_CREATE} = pgsql ]] && [[ ! ${DB_CREATE} = false ]]; then
        echo -e "MySQL database:      $(tput setaf 3)${DB}$(tput sgr 0) (replace -/_)"
        echo -e "MySQL database user: $(tput setaf 3)${DB_USER}$(tput sgr 0) (replace -/_)"
        echo -e "MySQL dat. password: $(tput setaf 3)${DB_PASSWD}$(tput sgr 0)"
    fi
    if [[ -x $(which psql) ]] && [[ ! ${DB_CREATE} = mysql ]] && [[ ! ${DB_CREATE} = false ]]; then
        echo -e "PgSQL database:      $(tput setaf 3)${DB}$(tput sgr 0) (replace -/_)"
        echo -e "PgSQL database user: $(tput setaf 3)${DB_USER}$(tput sgr 0) (replace -/_)"
        echo -e "PgSQL dat. password: $(tput setaf 3)${DB_PASSWD}$(tput sgr 0)"
    fi
    if [[ -x $(which samba) ]]; then
        echo -e "Samba user:          $(tput setaf 3)${SAMBA_USER}$(tput sgr 0)"
        echo -e "Samba password:      $(tput setaf 3)${SAMBA_PASSWD}$(tput sgr 0)"
    fi

    ## New line
    echo -e ''

    read -e -p 'Is it correct? (Yes/No/Cancel): ' -n 1 CONTINUE
    if [[ ${CONTINUE} =~ ^[Yy].*$ ]]; then
        break
    elif [[ ${CONTINUE} =~ ^[Cc].*$ ]]; then
        exit
    fi
    echo -e ''
done

#read -e -p 'Is it correct? (y/n): ' -n 1 CONTINUE
#case ${CONTINUE} in
#    [Yy]* )
#        break;;
#    [Nn]* )
#        exit 0;;
#    * )
#        echo -e "Answer either 'y' or 'n'."
#esac

#echo "Do you wish to install this program?"
#select yn in "Yes" "No"; do
#    case ${yn} in
#        Yes )
#            echo "yes"
#            break;;
#        No )
#            exit;;
#    esac
#done


## -----------------------------------------------------------------------------

# Detect user
if id ${USER} >/dev/null 2>&1; then
  echo -e "\nUser '${USER}' exists!\n"
  exit
fi

## Detect virtual host
if [[ -f "${VHOST_PATH}${HOST}${PROJECT}.conf" ]]; then
  echo -e "\nVirtual host '${PROJECT}' exists!\n"
  exit
fi

if [[ -x $(which mysql) ]] && [[ ! ${DB_CREATE} = pgsql ]] && [[ ! ${DB_CREATE} = false ]]; then
    ## Detect database
    if [[ $(mysql -sse "show databases like '${DB}'") ]]; then
      echo -e "\nMySQL database '${DB}' exists!\n"
      exit
    fi

    ## Detect database user
    if [[ $(mysql -sse "SELECT user FROM mysql.user WHERE user = '$DB_USER'") ]]; then
      echo -e "\nMySQL database user '${DB_USER}' exists!\n"
      exit
    fi
fi

if [[ -x $(which psql) ]] && [[ ! ${DB_CREATE} = mysql ]] && [[ ! ${DB_CREATE} = false ]]; then
    ## Detect database
    if sudo -u postgres psql -lqt | cut -d \| -f 1 | grep -qw ${DB}; then
      echo -e "\nPgSQL database '${DB}' exists!\n"
      exit
    fi

    ## Detect database user
    if sudo -u postgres psql -t -c '\du' | cut -d \| -f 1 | grep -qw ${DB_USER}; then
      echo -e "\nPgSQL database user '${DB_USER}' exists!\n"
      exit
    fi
fi

## -----------------------------------------------------------------------------

PROJECT_INFO="/home/${USER}/project-info.txt"

## Show user UID and GID
# id -u username
# id -G username

## New line
echo -e ''

## Add user
useradd ${USER} -p $(openssl passwd -1 ${USER_PASSWD}) -m -s /bin/bash
#useradd ${USER} -p $(openssl passwd -1 ${USER_PASSWD}) -m -s /bin/bash -G sudo

mkdir -p /home/${USER}/www/public
mkdir -p /home/${USER}/www/private
chown -R ${USER}:${PROJECT} /home/${USER}/www

echo -e "User $(tput setaf 2)${USER}$(tput sgr 0) with password $(tput setaf 2)${USER_PASSWD}$(tput sgr 0) created."
echo -e "Project:        ${PROJECT}" >> ${PROJECT_INFO}
echo -e "----------------------------------------" >> ${PROJECT_INFO}
echo -e "User:           ${USER}" >> ${PROJECT_INFO}
echo -e "Password:       ${USER_PASSWD}" >> ${PROJECT_INFO}

## Add virtual host
cat << EOF > ${VHOST_PATH}${HOST}${PROJECT}.conf
<VirtualHost ${HOST}${PROJECT}.${DOMAIN}:80>
  ServerName ${HOST}${PROJECT}.${DOMAIN}
  #ServerAlias mywebsite.cz

  ServerAdmin webmaster@localhost
  DocumentRoot /home/${USER}/www/public

  <Directory "/home/${USER}/www/public">
    Options +FollowSymLinks -Indexes +MultiViews
    AllowOverride all
    Order allow,deny
    Allow from all
    Require all granted
  </Directory>

  ErrorLog \${APACHE_LOG_DIR}/error_${PROJECT}.log
  CustomLog \${APACHE_LOG_DIR}/access_${PROJECT}.log combined

  <IfModule mpm_itk_module>
    AssignUserId ${USER} ${PROJECT}
  </IfModule>
</VirtualHost>
EOF
a2ensite -q ${HOST}${PROJECT} 1>/dev/null
echo -e "Virtual host $(tput setaf 2)${HOST}${PROJECT}.${DOMAIN}$(tput sgr 0) created."
echo -e "Virtual host:   ${HOST}${PROJECT}.${DOMAIN}" >> ${PROJECT_INFO}

if [[ -x $(which mysql) ]] && [[ ! ${DB_CREATE} = pgsql ]] && [[ ! ${DB_CREATE} = false ]]; then
    mysql -e "
      CREATE DATABASE IF NOT EXISTS $DB CHARACTER SET utf8mb4 COLLATE utf8mb4_czech_ci;
      GRANT ALL ON $DB.* TO $DB_USER@localhost IDENTIFIED BY '$DB_PASSWD';
    "
    #ALTER DATABASE $DB CHARACTER SET utf8mb4 COLLATE utf8mb4_czech_ci;

    echo -e "MySQL databese $(tput setaf 2)${DB}$(tput sgr 0) and user $(tput setaf 2)${DB_USER}$(tput sgr 0) with password $(tput setaf 2)${DB_PASSWD}$(tput sgr 0) created."
    echo -e "MySQL databese: ${DB}" >> ${PROJECT_INFO}
    echo -e "MySQL user:     ${DB_USER}" >> ${PROJECT_INFO}
    echo -e "MysQL password: ${DB_PASSWD}" >> ${PROJECT_INFO}
fi

if [[ -x $(which psql) ]] && [[ ! ${DB_CREATE} = mysql ]] && [[ ! ${DB_CREATE} = false ]]; then
    ## Add PgSQL database and database user
    sudo -u postgres createdb ${DB}
    sudo -u postgres psql -c "
        CREATE USER ${DB_USER} WITH ENCRYPTED PASSWORD '${DB_PASSWD}';
        GRANT ALL ON DATABASE ${DB} TO ${DB_USER};
        ALTER DATABASE ${DB} OWNER TO ${DB_USER};
        REVOKE ALL ON DATABASE ${DB} FROM PUBLIC;
    " 1>/dev/null

    echo -e "PgSQL databese $(tput setaf 2)${DB}$(tput sgr 0) and user $(tput setaf 2)${DB_USER}$(tput sgr 0) with password $(tput setaf 2)${DB_PASSWD}$(tput sgr 0) created."
    echo -e "PgSQL databese: ${DB}" >> ${PROJECT_INFO}
    echo -e "PgSQL user:     ${DB_USER}" >> ${PROJECT_INFO}
    echo -e "PgSQL password: ${DB_PASSWD}" >> ${PROJECT_INFO}

    ## Change database user password
    #sudo -u postgres psql -c "ALTER ROLE $POSTGRES_USER WITH ENCRYPTED PASSWORD '$POSTGRES_PASSWORD';"
fi

if [[ -x $(which samba) ]]; then
    ## Add Samba user
    (echo ${SAMBA_PASSWD}; echo ${SAMBA_PASSWD}) | smbpasswd -s -a ${SAMBA_USER} 1>/dev/null

    echo -e "Samba user $(tput setaf 2)${SAMBA_USER}$(tput sgr 0) with password $(tput setaf 2)${SAMBA_PASSWD}$(tput sgr 0) created."
    echo -e "Samba user:     ${SAMBA_USER}" >> ${PROJECT_INFO}
    echo -e "Samba password: ${SAMBA_PASSWD}" >> ${PROJECT_INFO}

    ## Change Samba password -> Add Samba user again

    ## Detect Samba user
    #test `pdbedit -w -L | awk -F":" '{ print $1 }' | grep '${SAMBA_USER}$' | wc -l` -eq 0 || echo "account exists"

    ## List Samba user
    #pdbedit -L
    #pdbedit -L -v

    ## Windows Samba access
    # \\hostname\username

fi

## New line
echo -e ''

## -----------------------------------------------------------------------------

## Services
service apache2 restart

if [[ -x $(which mysql) ]]; then
    service mysql restart
fi
if [[ -x $(which psql) ]]; then
    service postgresql restart
fi